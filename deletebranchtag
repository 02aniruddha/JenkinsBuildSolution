#!/bin/sh

# Assuming you have a master and develop branch, and that you make new
# release branches named as the version they correspond to, e.g. release-19.8.3.0
# Usage: ./merge-and-tag-master.sh 19.8.3.0

# Get version argument and verify
version=$1
if [ -z "$version" ]; then
  echo "Please specify a version"
  exit
fi

#bitbucket_user=$2
#bitbucket_password=$3

project_list=("Proj1" \
"Proj2")

working_dir=$(pwd)

for i in "${project_list[@]}"
do
	projectName=$i
	# Output
	if [ -d "../$projectName" ]
	then
		echo "Project $projectName Directory Exists"
	else
		echo "Project $projectName Directory Does not exist.Cloning $projectName"
		cd ../
		#git clone https://$bitbucket_user:$bitbucket_password@bitbucket.org/<GitURLPath>/$projectName.git
		git clone https://bitbucket.org/<GitURLPath>/$projectName.git
		cd $working_dir
	fi
	
	cd ../$projectName
	echo "Releasing version $version"
	echo "-------------------------------------------------------------------------"
	
	#Fetch the remote branches 
	git fetch
	
	# Get current branch and checkout if needed
	branch=$(git symbolic-ref --short -q HEAD)
	if [ "$branch" != "release" ]; then
	git checkout release
	git pull origin release
	fi
	
	# Ensure working directory in version branch clean
	git update-index -q --refresh
	if ! git diff-index --quiet HEAD --; then
	echo "Working directory not clean, resetting to HEAD"
	git reset HEAD --hard
	fi
	
	# Checkout master branch and merge version branch into master
	git checkout master
	git merge release --no-ff --no-edit
	
	# Run version script, creating a version tag, and push commit and tags to remote
	git tag -a CapsilonIQ-$version -m "release v$version" &&\
	git push origin master
	git push --tags
	#git push https://$bitbucket_user:$bitbucket_password@bitbucket.org/<GitURLPath>/$projectName.git
	#git push https://$bitbucket_user:$bitbucket_password@bitbucket.org/<GitURLPath>/$projectName.git --tags
	
	# Checkout dev branch and merge master into dev (to ensure we have the version)
	#git checkout dev
	#git merge master --no-ff --no-edit
	#git push
	
	# Delete version branch locally and on remote
	#git branch -D $version
	#git push origin --delete $version
	
	# Success
	echo "-------------------------------------------------------------------------"
	echo "Release $version complete"
	
	cd $working_dir
done
